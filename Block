package Models;


import javax.swing.*;
import java.awt.*;

public class Block extends Model {
     static String level = "1";
    //protected ImageIcon img;
    protected int live;
    protected boolean Visible = true;
    protected final static String Path_to_blocks = "Bloks";
    protected int Width = 30;
    protected int Height = 30;

    public Block(int X, int Y, boolean can_destroyed){
        CreateBlocks(X,Y,can_destroyed);
    }

    public void CreateBlocks(int X,int Y, boolean can_destroyed){
        setVisible(true);
        //setImg(can_destroyed);
        if(can_destroyed){
            live = 1;
        }
        else{
            live = 9999;
        }
        this.X = X;
        this.Y = Y;
        getSignal();
    }

    public boolean getDamage() {
        live--;
        if(live == 0){
            setVisible(false);
            getSignal();
            return true;
        }
        else{
            return false;
        }
    }

//    public void setImg(boolean can_destroyed) {
//        if(!can_destroyed){
//        img = new ImageIcon(Path_to_blocks+"\\"+level+"\\"+"b0.png");
//        } else{
//            img = new ImageIcon(Path_to_blocks+"\\"+"db0.png");
//            //System.out.println(Path_to_blocks+"0.png" +"    "+ Block.getIconHeight());
//        }
//    }
//    public Image getImg(){
//        return img.getImage();
//    }
    void setLevel(String level){
        this.level = level;
    }

    public void move(int X, int Y) {
        if(isVisible()){
        this.X+=X;
        this.Y+=Y;
        getSignal();}
    }

    public void move(){
        move(-Universe.SPEED_OF_UNIVERSE,0);
    }

    public boolean isVisible() {
        return Visible;
    }

    public void setVisible(boolean Visible) {
        this.Visible = Visible;
    }
    public boolean inHitBox(Plane player){
        if(((player.getY()+2)<=(this.Y+getHeight()))&&((player.getY()+player.getHeight()-2)>=(this.Y))&&((player.getX()+player.getWidth()-2)>=this.X)&&(player.getX()<=(this.X+getWidth()))){//здесь определяется область, в которой игрок может столкнуться с блоком
            for(int i = this.X; (i<(player.getWidth()+player.getX()))||(i<=(this.X+getWidth())); i++){
                if(((player.getY()+2)<=(function_of_blockD(i)))&&((player.getY()+2)>=(function_of_blockU(i)))){
                    return  true;
                }
                if(((player.getY()+player.getHeight()-2)>=function_of_blockU(i))&&((player.getY()+player.getHeight()-2)<=function_of_blockD(i))){
                    return  true;
                }
            }
        }
        return false;
    }
    int function_of_blockU(int X){//определяет верхнюю границу блока
        if((X<=(this.X+getWidth()))&&(X>=this.X)){
        return this.Y;
        } else{
            return 10000;
        }
    }

     int function_of_blockD(int X){//определяет нижнюю границу блока

         if((X<=(this.X+getWidth()))&&(X>=this.X)){
             return this.Y+getHeight();
         } else{
             return -10000;
         }
     }
     public boolean inHitBox(Bullet bullet){
         if((bullet.getX()>=this.X)&&(bullet.getX()<=(this.X+getWidth()))&&(bullet.getY()<=function_of_blockD(bullet.getX()))&&(bullet.getY()>=function_of_blockU(bullet.getX()))){
             return true;
         } else{
             return false;
         }
     }
    public String type_of_block(){
        if(live>1){
        return "B";
        } else{
            return "DB";
        }
    }
    public int getWidth(){return Width;}
    public int getHeight(){return Height;}
}

